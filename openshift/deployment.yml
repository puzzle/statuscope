---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    app: statuscope
  name: statuscope
  annotations:
    image.openshift.io/triggers: |-
      [
        {
          "from": { "kind":"ImageStreamTag", "name": "statuscope:latest" },
          "fieldPath": "spec.template.spec.containers[?(@.name==\"statuscope\")].image"
        },
        {
          "from": { "kind":"ImageStreamTag", "name": "rails:release" },
          "fieldPath": "spec.template.spec.initContainers[?(@.name==\"migrate-db\")].image"
        }
      ]

spec:
  replicas: 1
  selector:
    matchLabels:
      app: statuscope
    name: statuscope
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: statuscope
    spec:
      initContainers:
      - name: migrate-db
        image: statuscope:latest
        imagePullPolicy: Always
        env: &env
          - name: RAILS_SQLITE_FILE_PATH
            value: /opt/database/database.sqlite3
          - name: RAILS_LOG_TO_STDOUT
            value: "1"
          - name: RAILS_ENV
            value: production
          - name: SECRET_KEY_BASE
            valueFrom:
              secretKeyRef:
                key: secret_key_base
                name: statuscope-rails
        command:
          - bash
          - -c
          - rails db:migrate
        resources: &resources
          limits:
            cpu: 300m
            memory: 200Mi # Allow bursts for executing rake tasks via oc exec
          requests:
            cpu: 50m
            memory: 100Mi
        volumeMounts: &mounts
          - name: database
            mountPath: /opt/database
      volumes:
      - name: database
        persistentVolumeClaim:
          claimName: statuscope-database
      containers:
      - name: statuscope
        image: statuscope:latest
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 10
        env: *env
        ports:
        - containerPort: 8080
          protocol: TCP
        resources: *resources
        volumeMounts: *mounts
      volumes:
      - name: database
        persistentVolumeClaim:
          claimName: statuscope-database
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: statuscope
    prometheus-monitoring: 'true'
  name: statuscope
spec:
  ports:
  - name: 8080-tcp
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: statuscope
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: statuscope-database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
